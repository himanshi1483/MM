@model Mahamesh.Models.ApplicantRegistration

@{
    ViewBag.Title = "Create";
}

@*<link href="~/Content/Varsity/mdb.lite.min.css" rel="stylesheet" />*@
<style>
    .border {
        border: 2px solid #d2f1d6;
        border-radius: 5px;
        margin-bottom: 10px;
    }

    .btn-file {
        position: relative;
        overflow: hidden;
    }

        .btn-file input[type=file] {
            position: absolute;
            top: 0;
            right: 0;
            min-width: 100%;
            min-height: 100%;
            font-size: 100px;
            text-align: right;
            filter: alpha(opacity=0);
            opacity: 0;
            outline: none;
            background: white;
            cursor: inherit;
            display: block;
        }

    #img-upload {
        width: 20%;
    }

    #regForm {
        background-color: #ffffff;
        /*margin: 100px auto;
        font-family: Raleway;
        padding: 40px;
        width: 70%;*/
        min-width: 300px;
    }


    /* Mark input boxes that gets an error on validation: */
    input.invalid {
        background-color: #ffdddd;
    }

    /* Hide all steps by default: */
    .tab {
        display: none;
    }


    /*#prevBtn {
        background-color: #bbbbbb;
    }*/

    /* Make circles that indicate the steps of the form: */
    .step {
        height: 15px;
        width: 15px;
        margin: 0 2px;
        background-color: #bbbbbb;
        border: none;
        border-radius: 50%;
        display: inline-block;
        opacity: 0.5;
    }

        .step.active {
            opacity: 1;
        }

        /* Mark the steps that are finished and valid: */
        .step.finish {
            background-color: #4CAF50;
        }

    .form-group {
        padding-right: 15px;
        margin-bottom: 5px;
        padding-bottom: 10px;
    }
</style>
<div class="container" style="margin-bottom:150px;">
    <div class="headerDashboard">
        <div class="col-lg-11 col-md-11 col-sm-11 col-xs-11 headerText">
            <h2>राजे यशवंतराव होळकर महामेष योजना</h2>
        </div>
        <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1" style="text-align:right">
            <img src="~/Images/Raje.jpg" class="img-responsive" alt="Raje Yashwant Holkar" />
        </div>

    </div>
    <div class="panel panel-primary-2">
        <div class="panel-heading panel-primary-2 text-center"><h5>अर्जदारांनी करावयाच्या अर्ज</h5></div>
        <div class="panel-body">
            @using (Html.BeginForm("Create", "ApplicantRegistrations", FormMethod.Post, new { enctype = "multipart/form-data", @id = "regForm" }))
            {
                @Html.AntiForgeryToken()
                <div class="col-lg-8">
                    <div class="col-lg-6 text-right" id="tabBtn">
                        <div style="text-align:right;display:none">
                            <span class="step"></span>
                            <span class="step"></span>
                            <span class="step"></span>

                        </div>
                    </div>
                </div>
                <div style="overflow:auto;">
                    <div style="float:right;">
                        <button type="button" class="btn btn-danger" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                        <button type="submit" class="btn btn-default" id="saveBtn" onclick="nextPrev(1)">Save</button>
                        <button type="button" class="btn btn-success" id="nextBtn" onclick="nextPrev(1)">Next</button>
                    </div>
                </div>
                <!-- One "tab" for each step in the form: -->
                <div class="tab">

                    <div class="col-lg-6">
                        <div class="alert">@Html.ValidationSummary(true, "", new { @class = "text-danger" })</div>
                    </div>
                    <div class="form-group col-lg-12">
                        <label>Upload Image</label>
                        <div class="input-group">
                            <span class="input-group-btn">
                                <span class="btn btn-default btn-file">
                                    Browse… <input type="file" id="imgInp" name="file">
                                </span>
                            </span>
                            <input type="text" class="form-control" readonly>
                        </div>
                        <img id='img-upload' />
                    </div>
                    <div class="col-lg-12 heading panel-primary-2 text-center" style="margin-bottom:10px;">
                        <h5>पत्रव्यवहाराचा पत्ता</h5>
                    </div>
                    <div class="col-lg-12">
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.ApName)
                            <div>
                                @Html.EditorFor(model => model.ApName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ApName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.Dist, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.DropDownListFor(model => model.Dist, ViewBag.District as List<SelectListItem>, new { @class = "form-control" })

                                @Html.ValidationMessageFor(model => model.Dist, "", new { @class = "text-danger" })
                            </div>
                        </div>

                    </div>
                    <div class="col-lg-12">
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.Tahashil, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.DropDownListFor(model => model.Tahashil, new SelectList(string.Empty, "Value", "Text"), new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Tahashil, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group  col-lg-6">
                            @Html.LabelFor(model => model.VillageName)
                            <div>
                                @Html.DropDownListFor(model => model.VillageName, new SelectList(string.Empty, "Value", "Text"), new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.VillageName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.PinCode, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.EditorFor(model => model.PinCode, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PinCode, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.HVillage, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.DropDownListFor(model => model.HVillage, new SelectList(string.Empty, "Value", "Text"), new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.HVillage, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.PhNo, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.EditorFor(model => model.PhNo, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PhNo, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.DOB, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @*<input type="date" data-date="20/08/2019" class="form-control" data-date-format="DD/MM/YYYY">*@
                                @*<div>
                                        Date: <input type="text" id="DOB" />
                                    </div>*@
                                @*<div id="datepicker"></div>*@

                                @Html.EditorFor(model => model.DOB, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <div class="form-group  col-lg-6">
                            @Html.LabelFor(model => model.Age, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.EditorFor(model => model.Age, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label" })
                            <div>

                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" class="custom-control-input" id="customRadio" name="gender" value="पुरुष">
                                    <label class="custom-control-label" for="customRadio">पुरुष</label>
                                </div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" class="custom-control-input" id="customRadio2" name="gender" value="स्त्री">
                                    <label class="custom-control-label" for="customRadio2">स्त्री</label>
                                </div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" class="custom-control-input" id="customRadio3" name="gender" value="trans">
                                    <label class="custom-control-label" for="customRadio3">trans</label>
                                </div>
                                @*@Html.EditorFor(model => model.Gender, new { htmlAttributes = new { @class = "form-control" } })*@
                                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.ChildCount, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @*@Html.EditorFor(model => model.ChildCount, new { htmlAttributes = new { @class = "form-control" } })*@
                                <select class="form-control" id="ChildCount">
                                    <option value="-1">Select</option>
                                    <option value="0">0</option>
                                    <option value="1">1</option>
                                    <option value="2">2</option>
                                    <option value="3">3</option>
                                    <option value="4">4</option>
                                    <option value="5">5</option>
                                    <option value="6">6</option>
                                    <option value="7">7</option>
                                    <option value="8">8</option>
                                    <option value="9">9</option>
                                    <option value="10">10</option>

                                </select>
                                @Html.ValidationMessageFor(model => model.ChildCount, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group  col-lg-6">
                            @Html.LabelFor(model => model.Child2006, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @*@Html.EditorFor(model => model.Child2006, new { htmlAttributes = new { @class = "form-control" } })*@
                                <select class="form-control" id="Child2006">
                                    <option value="-1">Select</option>
                                    <option value="0">0</option>
                                    <option value="1">1</option>
                                    <option value="2">2</option>
                                    <option value="3">3</option>
                                    <option value="4">4</option>
                                    <option value="5">5</option>
                                    <option value="6">6</option>
                                    <option value="7">7</option>
                                    <option value="8">8</option>
                                    <option value="9">9</option>
                                    <option value="10">10</option>

                                </select>
                                @Html.ValidationMessageFor(model => model.Child2006, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.Caste, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.EditorFor(model => model.Caste, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.Caste, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.SubCatse, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.DropDownListFor(model => model.SubCatse, ViewBag.Caste as List<SelectListItem>, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.SubCatse, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12">


                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.RationCardNumber, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.EditorFor(model => model.RationCardNumber, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.RationCardNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.AdharCardNo, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.EditorFor(model => model.AdharCardNo, new { htmlAttributes = new { @class = "form-control", @readonly = "@readonly" } })
                                @Html.ValidationMessageFor(model => model.AdharCardNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.ApplicantCrippled, htmlAttributes: new { @class = "control-label" })
                            <div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" onclick="javascript:checkCripple();" class="custom-control-input" id="ApplicantCrippled1" name="ApplicantCrippled" value="होय">
                                    <label class="custom-control-label" for="ApplicantCrippled1">होय</label>
                                </div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" class="custom-control-input" onclick="javascript:checkCripple();" id="ApplicantCrippled2" name="ApplicantCrippled" value="नाही">
                                    <label class="custom-control-label" for="ApplicantCrippled2">
                                        नाही
                                    </label>
                                </div>
                                @Html.ValidationMessageFor(model => model.ApplicantCrippled, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-lg-6" style="display:none" id="divCripple">
                            @Html.LabelFor(model => model.CrippledPercentage, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.DropDownListFor(model => model.CrippledPercentage, ViewBag.Percentage as List<SelectListItem>, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.CrippledPercentage, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.PresentDaySheep, htmlAttributes: new { @class = "control-label" })
                            <div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" class="custom-control-input" onclick="javascript:checkSheep();" id="PresentDaySheep1" name="PresentDaySheep" value="होय">
                                    <label class="custom-control-label" for="PresentDaySheep1">होय</label>
                                </div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" class="custom-control-input" onclick="javascript:checkSheep();" id="PresentDaySheep2" name="PresentDaySheep" value="नाही">
                                    <label class="custom-control-label" for="PresentDaySheep2">
                                        नाही
                                    </label>
                                </div>
                                @Html.ValidationMessageFor(model => model.PresentDaySheep, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-lg-6" id="divSheep" style="display:none">
                            @Html.LabelFor(model => model.NumberOfSheepIs, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.DropDownListFor(model => model.NumberOfSheepIs, ViewBag.Sheep as List<SelectListItem>, new { @class = "form-control", @Value = "0" })
                                @Html.ValidationMessageFor(model => model.NumberOfSheepIs, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <div class="form-group col-lg-6">

                            <div class="custom-control custom-radio custom-control-inline">
                                <input type="radio" class="custom-control-input" id="ApplicantsPermanentInOnePlace" name="ApplicantsPermanentInOnePlace" value="होय">
                                @Html.LabelFor(model => model.ApplicantsPermanentInOnePlace, htmlAttributes: new { @class = "custom-control-label", @for = "ApplicantsPermanentInOnePlace" })
                            </div>
                        </div>
                        <div class="form-group col-lg-6">
                            <div class="custom-control custom-radio custom-control-inline">
                                <input type="radio" class="custom-control-input" id="ApplicantsMigratedByWayOfTransit" name="ApplicantsPermanentInOnePlace" value="नाही">
                                @Html.LabelFor(model => model.ApplicantsMigratedByWayOfTransit, htmlAttributes: new { @class = "custom-control-label", @for = "ApplicantsMigratedByWayOfTransit" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.IsApplicantOwnedLand, htmlAttributes: new { @class = "control-label" })
                            <div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" class="custom-control-input" onclick="javascript:checkLandOwned();" id="IsApplicantOwnedLand1" name="IsApplicantOwnedLand" value="होय">
                                    <label class="custom-control-label" for="IsApplicantOwnedLand1">होय</label>
                                </div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" class="custom-control-input" onclick="javascript:checkLandOwned();" id="IsApplicantOwnedLand2" name="IsApplicantOwnedLand" value="नाही">
                                    <label class="custom-control-label" for="IsApplicantOwnedLand2">
                                        नाही
                                    </label>
                                </div>
                                @Html.ValidationMessageFor(model => model.IsApplicantOwnedLand, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group col-lg-6" id="divLease" style="display:none">
                            @Html.LabelFor(model => model.IsNotIsAvailableOnLease, htmlAttributes: new { @class = "control-label" })
                            <div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" class="custom-control-input" onclick="javascript:checkLandLeased();" id="IsNotIsAvailableOnLease1" name="IsNotIsAvailableOnLease" value="होय">
                                    <label class="custom-control-label" for="IsNotIsAvailableOnLease1">होय</label>
                                </div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" onclick="javascript:checkLandLeased();" class="custom-control-input" id="IsNotIsAvailableOnLease2" name="IsNotIsAvailableOnLease" value="नाही">
                                    <label class="custom-control-label" for="IsNotIsAvailableOnLease2">
                                        नाही
                                    </label>
                                </div>
                                @Html.ValidationMessageFor(model => model.IsNotIsAvailableOnLease, "", new { @class = "text-danger" })
                            </div>
                        </div>

                    </div>
                    <div class="col-lg-12" id="divLandOwned" style="display:none">
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.YesApplicantOwnedLandEcre, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.DropDownListFor(model => model.YesApplicantOwnedLandEcre, (IEnumerable<SelectListItem>)ViewBag.Acre as List<SelectListItem>, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.YesApplicantOwnedLandEcre, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.YesApplicantOwnedLandGuntha, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.DropDownListFor(model => model.YesApplicantOwnedLandGuntha, (IEnumerable<SelectListItem>)ViewBag.Acre as List<SelectListItem>, new { @class = "form-control" })

                                @Html.ValidationMessageFor(model => model.YesApplicantOwnedLandGuntha, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12" id="divLandLeased" style="display:none">
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.YesAvailableOnLeaseEcre, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.DropDownListFor(model => model.YesAvailableOnLeaseEcre, ViewBag.Acre as List<SelectListItem>, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.YesAvailableOnLeaseEcre, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.YesAvailableOnLeaseGuntha, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.DropDownListFor(model => model.YesAvailableOnLeaseGuntha, (IEnumerable<SelectListItem>)ViewBag.Acre as List<SelectListItem>, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.YesAvailableOnLeaseGuntha, "", new { @class = "text-danger" })
                            </div>
                        </div>


                    </div>
                    <div class="col-lg-12 text-center alert alert-warning">Page 1 of 3</div>
                </div>
                <div class="tab">
                    <div class="col-lg-6">
                        <div class="alert">@Html.ValidationSummary(true, "", new { @class = "text-danger" })</div>
                    </div>
                    <div class="col-lg-12 heading-green heading-line text-center" style="margin-bottom:20px">
                        <h5>Land Detail: (number must be in English)</h5>
                    </div>
                    <div class="col-lg-12">
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.GardeningEcre, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.DropDownListFor(model => model.GardeningEcre, (IEnumerable<SelectListItem>)ViewBag.Acre as List<SelectListItem>, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.GardeningEcre, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.CuminEcre, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.DropDownListFor(model => model.CuminEcre, (IEnumerable<SelectListItem>)ViewBag.Acre as List<SelectListItem>, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.CuminEcre, "", new { @class = "text-danger" })
                            </div>
                        </div>


                    </div>
                    <div class="col-lg-12">
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.WaterSource, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.DropDownListFor(model => model.WaterSource, (IEnumerable<SelectListItem>)ViewBag.WaterSource as List<SelectListItem>, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.WaterSource, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.DurationOfWater, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.DropDownListFor(model => model.DurationOfWater, (IEnumerable<SelectListItem>)ViewBag.Duration as List<SelectListItem>, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.DurationOfWater, "", new { @class = "text-danger" })
                            </div>
                        </div>


                    </div>
                    <div class="col-lg-12">
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.LastYearFooder, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.EditorFor(model => model.LastYearFooder, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.LastYearFooder, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.LastYearTotalProductionInKG, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.EditorFor(model => model.LastYearTotalProductionInKG, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.LastYearTotalProductionInKG, "", new { @class = "text-danger" })
                            </div>
                        </div>


                    </div>
                    <div class="col-lg-12">
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.IsWarehouseForSheep, htmlAttributes: new { @class = "control-label" })
                            <div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" onclick="javascript:checkWarehouse();" class="custom-control-input" id="IsWarehouseForSheep1" name="IsWarehouseForSheep" value="होय">
                                    <label class="custom-control-label" for="IsWarehouseForSheep1">होय</label>
                                </div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" onclick="javascript:checkWarehouse();" class="custom-control-input" id="IsWarehouseForSheep2" name="IsWarehouseForSheep" value="नाही">
                                    <label class="custom-control-label" for="IsWarehouseForSheep2">
                                        नाही
                                    </label>
                                </div>
                                @Html.ValidationMessageFor(model => model.IsWarehouseForSheep, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group col-lg-6" id="divSpace" style="display:none">
                            @Html.LabelFor(model => model.IsNotIsAtLeastOnePinpointSpace, htmlAttributes: new { @class = "control-label" })
                            <div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" class="custom-control-input" id="IsNotIsAtLeastOnePinpointSpace1" name="IsNotIsAtLeastOnePinpointSpace" value="होय">
                                    <label class="custom-control-label" for="IsNotIsAtLeastOnePinpointSpace1">होय</label>
                                </div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" class="custom-control-input" id="IsNotIsAtLeastOnePinpointSpace2" name="IsNotIsAtLeastOnePinpointSpace" value="नाही">
                                    <label class="custom-control-label" for="IsNotIsAtLeastOnePinpointSpace2">
                                        नाही
                                    </label>
                                </div>
                                @Html.ValidationMessageFor(model => model.IsNotIsAtLeastOnePinpointSpace, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12" id="divWarehouse" style="display:none">
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.YesIntekOfSheepInWarehouse, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.DropDownListFor(model => model.YesIntekOfSheepInWarehouse, (IEnumerable<SelectListItem>)ViewBag.Sheep as List<SelectListItem>, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.YesIntekOfSheepInWarehouse, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.TypeExistingCastle, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.DropDownListFor(model => model.TypeExistingCastle, ViewBag.TypeCastle as List<SelectListItem>, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.TypeExistingCastle, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <div class="form-group col-lg-4">
                            @Html.LabelFor(model => model.IsSavingsGroupMember, htmlAttributes: new { @class = "control-label" })
                            <div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" class="custom-control-input" onclick="javascript:checkSavings();" id="IsSavingsGroupMember1" name="IsSavingsGroupMember" value="होय">
                                    <label class="custom-control-label" for="IsSavingsGroupMember1">होय</label>
                                </div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" class="custom-control-input" onclick="javascript:checkSavings();" id="IsSavingsGroupMember2" name="IsSavingsGroupMember" value="नाही">
                                    <label class="custom-control-label" for="IsSavingsGroupMember2">
                                        नाही
                                    </label>
                                </div>
                                @Html.ValidationMessageFor(model => model.IsSavingsGroupMember, "", new { @class = "text-danger" })
                            </div>
                        </div>

                    </div>
                    <div class="col-lg-12" id="divSavings" style="display:none">
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.SavingGroupName, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.EditorFor(model => model.SavingGroupName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.SavingGroupName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.SavingGroupRegNumber, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.EditorFor(model => model.SavingGroupRegNumber, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.SavingGroupRegNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>

                    </div>
                    <div class="col-lg-12">
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.IsanimalHusbandryManufacturingCompanyMember, htmlAttributes: new { @class = "control-label" })
                            <div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" class="custom-control-input" onclick="javascript:checkCompany();" id="IsanimalHusbandryManufacturingCompanyMember1" name="IsanimalHusbandryManufacturingCompanyMember" value="होय">
                                    <label class="custom-control-label" for="IsanimalHusbandryManufacturingCompanyMember1">होय</label>
                                </div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" class="custom-control-input" onclick="javascript:checkCompany();" id="IsanimalHusbandryManufacturingCompanyMember2" name="IsanimalHusbandryManufacturingCompanyMember" value="नाही">
                                    <label class="custom-control-label" for="IsanimalHusbandryManufacturingCompanyMember2">
                                        नाही
                                    </label>
                                </div>
                                @Html.ValidationMessageFor(model => model.IsanimalHusbandryManufacturingCompanyMember, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12" id="divCompany" style="display:none">
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.IsanimalHusbandryManufacturingCompanyName, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.EditorFor(model => model.IsanimalHusbandryManufacturingCompanyName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.IsanimalHusbandryManufacturingCompanyName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.IsanimalHusbandryManufacturingCompanyRegNumber, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.EditorFor(model => model.IsanimalHusbandryManufacturingCompanyRegNumber, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.IsanimalHusbandryManufacturingCompanyRegNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.IsTrained, htmlAttributes: new { @class = "control-label" })
                            <div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" class="custom-control-input" id="IsTrained1" name="IsTrained" value="होय">
                                    <label class="custom-control-label" for="IsTrained1">होय</label>
                                </div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" class="custom-control-input" id="IsTrained2" name="IsTrained" value="नाही">
                                    <label class="custom-control-label" for="IsTrained2">
                                        नाही
                                    </label>
                                </div>
                                @Html.ValidationMessageFor(model => model.IsTrained, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12 text-center alert alert-warning">Page 2 of 3</div>
                </div>
                <div class="tab">
                    <div class="col-lg-6">
                        <div class="alert">@Html.ValidationSummary(true, "", new { @class = "text-danger" })</div>
                    </div>
                    <div class="col-lg-12 text-center">
                        <h3>अर्जदारास योजनेमधील कोणत्या घटकाखाली लाभ घ्यावयाचा आहे</h3>
                        <h5>महत्वाची सूचना – या योजनेअंतर्गत खालील १५ उपघटकामध्ये लाभ घेता येईल. तथापि</h5>
                    </div>
                    <div class="col-lg-12 border">
                        <div class="alert alert-success text-center">
                            १. अर्जदाराने खालील पहिल्या दोन उपघटकामधील कोणत्याही एका उपघटकाचा लाभ घेतल्यास त्यांना इतर उपघटकांमध्ये लाभ घेता येणार नाही.
                        </div>
                        <div class="form-group col-lg-12">
                            <div class="form-check alert alert-info">
                                <input type="checkbox" class="form-check-input" id="CompNumber1" name="CompNumber" value="1">
                                <label class="form-check-label" for="CompNumber1"> 1 कायमस्वरूपी एका ठिकाणी राहून मेंढीपालन करण्याकरिता पायाभूत सोई – सुविधेसह २० मेंढया + १ मेंढानर असा मेंढीगट ७५% अनुदानावर वाटप करणे (स्थायी)</label>
                            </div>
                            <div class="form-check alert alert-warning">
                                <input type="checkbox" class="form-check-input" id="CompNumber2" name="CompNumber" value="2">
                                <label class="form-check-label" for="CompNumber2"> 2 स्थलांतर पद्धतीने मेंढीपालन करण्याकरिता पायाभूत सोई – सुविधेसह २० मेंढया + १ मेंढानर असा मेंढीगट ७५% अनुदानावर वाटप करणे (स्थलांतरीत)</label>
                            </div>

                        </div>
                    </div>

                    <div class="col-lg-12 border">
                        <div class="alert alert-success text-center">
                            २. अर्जदाराने खालील ३ ते ७ या उपघटकांमधील कोणत्याही एका उपघटकाचा लाभ घेतल्यास त्यांना पहिले २ उपघटक वगळता उर्वरित उपघटकांमधील मेंढीपालन व्यवसाय करण्याच्या प्रकारानुसार (स्थायी किंवा स्थलांतरित) व सध्या असलेल्या मेंढ्यांच्या संख्येनुसार खालीलप्रमाणे दर्शविण्यात आलेल्या उपघटक क्रमांक ८ ते ११ मधील कोणत्याही एका उपघटकाचा लाभ घेता येईल, तसेच १२ व १३ मधील कोणत्याही एका उपघटकाचा लाभ घेता येईल.
                        </div>
                        <div class="form-group col-lg-12">
                            <div class="form-check alert alert-info">
                                <input type="checkbox" class="form-check-input" id="CompNumber3" value="3" name="CompNumber" />
                                <label class="form-check-label" for="CompNumber3">
                                    3 ज्यांच्याकडे स्वतचे २० किंवा त्यापेक्षा अधिक परंतु ४० पेक्षा कमी मेंढया आहेत अशा लाभार्थ्यांना सुधारित प्रजातीचा १ नरमेंढा ७५% अनुदानावर वाटप करणे.
                                </label>
                            </div>
                            <div class="form-check alert alert-warning">
                                <input type="checkbox" class="form-check-input" id="CompNumber4" value="4" name="CompNumber" />
                                <label class="form-check-label" for="CompNumber4">
                                    4 ज्यांच्याकडे स्वतचे ४० किंवा त्यापेक्षा अधिक परंतु ६० पेक्षा कमी मेंढया आहेत अशा लाभार्थ्यांना सुधारित प्रजातीचा २ नरमेंढे ७५% अनुदानावर वाटप करणे.
                                </label>
                            </div>
                            <div class="form-check alert alert-info">
                                <input type="checkbox" class="form-check-input" id="CompNumber5" value="5" name="CompNumber" />
                                <label class="form-check-label" for="CompNumber5">
                                    5 ज्यांच्याकडे स्वतचे ६० किंवा त्यापेक्षा अधिक परंतु ८० पेक्षा कमी मेंढया आहेत अशा लाभार्थ्यांना सुधारित प्रजातीचा ३ नरमेंढे ७५% अनुदानावर वाटप करणे.

                                </label>
                            </div>
                            <div class="form-check alert alert-warning">
                                <input type="checkbox" class="form-check-input" id="CompNumber6" value="6" name="CompNumber" />
                                <label class="form-check-label" for="CompNumber6">
                                    6 ज्यांच्याकडे स्वतचे ८० किंवा त्यापेक्षा अधिक परंतु १०० पेक्षा कमी मेंढया आहेत अशा लाभार्थ्यांना सुधारित प्रजातीचा ४ नरमेंढे ७५% अनुदानावर वाटप करणे.
                                </label>
                            </div>
                            <div class="form-check alert alert-info">
                                <input type="checkbox" class="form-check-input" id="CompNumber7" value="7" name="CompNumber" />
                                <label class="form-check-label" for="CompNumber7">
                                    7 ज्यांच्याकडे स्वतचे १०० किंवा त्यापेक्षा अधिक मेंढया आहेत अशा लाभार्थ्यांना सुधारित प्रजातीचा ५ नरमेंढे ७५% अनुदानावर वाटप करणे.
                                </label>
                            </div>

                        </div>
                    </div>
                    <div class="col-lg-12 border">
                        <div class="form-check alert alert-warning">
                            <input type="checkbox" class="form-check-input" id="CompNumber8" value="8" name="CompNumber" />
                            <label class="form-check-label" for="CompNumber8">8 ज्यांच्याकडे स्वत: च्या २० मेंढया व १ मेंढानर अशा एकूण २१ मेंढया किंवा त्यापेक्षा अधिक परंतु ४० मेंढ्यापेक्षा कमी अशा मेंढ्यांच्या एका ठिकाणी राहून स्थायी स्वरूपाचे मेंढी पालनासाठी पायाभूत सोई-सुविधा उपलब्ध करून देण्यासाठी ७५% अनुदान वाटप (स्थायी) </label>
                        </div>
                        <div class="form-group col-lg-12">
                            <div class="form-check alert alert-warning">
                                <input type="checkbox" class="form-check-input" id="CompNumber9" value="9" name="CompNumber" />
                                <label class="form-check-label" for="CompNumber9">
                                    9 ज्यांच्याकडे स्वत: च्या २० मेंढया व १ मेंढानर अशा एकूण २१ मेंढया किंवा त्यापेक्षा अधिक परंतु ४० मेंढ्यापेक्षा कमी अशा मेंढ्यांच्या स्थलांतरीत स्वरूपाचे मेंढी पालनासाठी पायाभूत सोई-सुविधा उपलब्ध करून देण्यासाठी ७५% अनुदान वाटप (स्थलांतरीत)

                                </label>
                            </div>
                            <div class="form-check alert alert-info">
                                <input type="checkbox" class="form-check-input" id="CompNumber10" value="10" name="CompNumber" />
                                <label class="form-check-label" for="CompNumber10">
                                    10 ज्यांच्याकडे स्वत: च्या ४० मेंढया व २ मेंढानर अशा एकूण ४२ मेंढया किंवा त्यापेक्षा अधिक अशा मेंढ्यांच्या एका ठिकाणी राहून स्थायी स्वरूपाचे मेंढी पालनासाठी पायाभूत सोई-सुविधा उपलब्ध करून देण्यासाठी ७५% अनुदान वाटप (स्थायी)

                                </label>
                            </div>
                            <div class="form-check alert alert-warning">
                                <input type="checkbox" class="form-check-input" id="CompNumber11" value="11" name="CompNumber" />
                                <label class="form-check-label" for="CompNumber11">
                                    11 ज्यांच्याकडे स्वत: च्या ४० मेंढया व २ मेंढानर अशा एकूण ४२ मेंढया किंवा त्यापेक्षा अधिक अशा मेंढ्यांच्या स्थलांतरीत स्वरूपाचे मेंढी पालनासाठी पायाभूत सोई-सुविधा उपलब्ध करून देण्यासाठी ७५% अनुदान वाटप (स्थलांतरीत)

                                </label>
                            </div>

                        </div>
                    </div>
                    <div class="col-lg-12 border">
                        <div class="form-group col-lg-12">
                            <div class="form-check alert alert-info">
                                <input type="checkbox" class="form-check-input" id="CompNumber12" value="12" name="CompNumber" />
                                <label class="form-check-label" for="CompNumber12">
                                    12 एका ठिकाणी राहून स्थायी स्वरूपाचे मेंढी पालनासाठी संतुलित खाद्य उपलब्ध करून देण्यासाठी ७५% अनुदान वाटप (स्थायी) (१०० ग्रॅम प्रती दिन प्रती मेंढी याप्रमाणे माहे एप्रिल ते जुलै या ४ महिन्याच्या कालावधी करिता )
                                </label>
                            </div>
                            <div class="form-check alert alert-warning">
                                <input type="checkbox" class="form-check-input" id="CompNumber13" value="13" name="CompNumber" />
                                <label class="form-check-label" for="CompNumber13">
                                    13 भटकंती करणारे स्थलांतरीत स्वरूपाच्या मेंढी पालनासाठी संतुलित खाद्य उपलब्ध करून देण्यासाठी ७५% अनुदान वाटप (स्थलांतरीत)(१०० ग्रॅम प्रती दिन प्रती मेंढी याप्रमाणे जून ते जुलै या २ महिन्याच्या कालावधी करिता )

                                </label>

                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12 border">
                        <div class="alert alert-success text-center">
                            ३. उपघटक क्र. १४ व १५ या पैकी एका उपघटकांमध्ये लाभ घेता येईल.
                        </div>
                        <div class="form-group col-lg-12">
                            <div class="form-check alert alert-info">
                                <input type="checkbox" class="form-check-input" id="CompNumber14" value="14" name="CompNumber" />
                                <label class="form-check-label" for="CompNumber14">
                                    14 कुट्टी केलेल्या हिरव्या चार्‍याचा मुरघस करण्याकरिता घासड्या बांधण्याचे यंत्र (Mini Sailage Baler cum Wrapper) खरेदी करण्यासाठी ५०% अनुदान वाटप
                                </label>
                            </div>
                            <div class="form-check alert alert-warning">
                                <input type="checkbox" class="form-check-input" id="CompNumber15" value="15" name="CompNumber" />
                                <label class="form-check-label" for="CompNumber15">
                                    15 पशुखाद्या कारखाने उभारणीसाठी ५०% अनुदान वाटप
                                </label>
                            </div>
                        </div>
                    </div>

                    <div class="col-lg-12 text-center alert alert-warning">Page 3 of 3</div>
                </div>
                @*<div class="tab">
                        <div class="col-lg-10">
                            <div class="form-group col-lg-6">
                                @Html.LabelFor(model => model.ReshanCard, htmlAttributes: new { @class = "control-label" })
                                <div>
                                    @Html.EditorFor(model => model.ReshanCard, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ReshanCard, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-lg-4">
                                @Html.LabelFor(model => model.CompNumber, htmlAttributes: new { @class = "control-label" })
                                <div>
                                    @Html.EditorFor(model => model.CompNumber, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.CompNumber, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12">
                            <div class="form-group col-lg-6">
                                @Html.LabelFor(model => model.AdharCardFU, htmlAttributes: new { @class = "control-label" })
                                <div>
                                    @Html.EditorFor(model => model.AdharCardFU, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.AdharCardFU, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-lg-6">
                                @Html.LabelFor(model => model.LivestockDevOffCertificate, htmlAttributes: new { @class = "control-label" })
                                <div>
                                    @Html.EditorFor(model => model.LivestockDevOffCertificate, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.LivestockDevOffCertificate, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12">
                            <div class="form-group col-lg-6">
                                @Html.LabelFor(model => model.CasteCertificate, htmlAttributes: new { @class = "control-label" })
                                <div>
                                    @Html.EditorFor(model => model.CasteCertificate, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.CasteCertificate, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-lg-6">
                                @Html.LabelFor(model => model.ResidentCertificate, htmlAttributes: new { @class = "control-label" })
                                <div>
                                    @Html.EditorFor(model => model.ResidentCertificate, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ResidentCertificate, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="col-lg-12">
                            <div class="form-group col-lg-6">
                                @Html.LabelFor(model => model.TenancyAgreement, htmlAttributes: new { @class = "control-label" })
                                <div>
                                    @Html.EditorFor(model => model.TenancyAgreement, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.TenancyAgreement, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-lg-6">
                                @Html.LabelFor(model => model.FU712orIncomeCertificate, htmlAttributes: new { @class = "control-label" })
                                <div>
                                    @Html.EditorFor(model => model.FU712orIncomeCertificate, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.FU712orIncomeCertificate, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12">
                            <div class="form-group col-lg-6">
                                @Html.LabelFor(model => model.BankPassBook, htmlAttributes: new { @class = "control-label" })
                                <div>
                                    @Html.EditorFor(model => model.BankPassBook, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.BankPassBook, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-lg-6">
                                @Html.LabelFor(model => model.BachatMemberCertificate, htmlAttributes: new { @class = "control-label" })
                                <div>
                                    @Html.EditorFor(model => model.BachatMemberCertificate, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.BachatMemberCertificate, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12">
                            <div class="form-group col-lg-6">
                                @Html.LabelFor(model => model.CompanyMemberCertificate, htmlAttributes: new { @class = "control-label" })
                                <div>
                                    @Html.EditorFor(model => model.CompanyMemberCertificate, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.CompanyMemberCertificate, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-lg-6">
                                @Html.LabelFor(model => model.DisabilityCertificate, htmlAttributes: new { @class = "control-label" })
                                <div>
                                    @Html.EditorFor(model => model.DisabilityCertificate, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.DisabilityCertificate, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>


                        <div class="col-lg-12">
                            <div class="form-group col-lg-6">
                                @Html.LabelFor(model => model.HamiPtra, htmlAttributes: new { @class = "control-label" })
                                <div>
                                    @Html.EditorFor(model => model.HamiPtra, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.HamiPtra, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <ul class="list-inline pull-xs-right">
                                <li class="list-inline-item">
                                    <button type="button" class="btn btn-default prev-step">Previous</button>
                                </li>
                                <li class="list-inline-item">
                                    <button type="button" class="btn btn-default next-step">Skip</button>
                                </li>
                                <li class="list-inline-item">
                                    <button type="button" class="btn btn-primary btn-info-full next-step">Save and continue</button>
                                </li>
                            </ul>
                        </div>
                    </div>*@


            }
        </div>
        <div class="col-lg-8">


        </div>
        <div style="overflow:auto;">
            <div style="float:right;">
                <button type="button" class="btn btn-danger" id="prevBtn1" onclick="nextPrev(-1)">Previous</button>
                <button type="submit" class="btn btn-default" id="saveBtn1" onclick="nextPrev(1)">Save</button>
                <button type="button" class="btn btn-success" id="nextBtn1" onclick="nextPrev(1)">Next</button>
            </div>
        </div>
    </div>
</div>
<script src="/Content/Varsity/assets/js/jquery.min.js" type="text/javascript"></script>
<script>
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the current tab

    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tab");

        x[n].style.display = "block";
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
            document.getElementById("saveBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
            document.getElementById("prevBtn").className = "btn btn-danger";
            document.getElementById("saveBtn").style.display = "inline";
            document.getElementById("saveBtn").className = "btn btn-success";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
            document.getElementById("nextBtn").className = "btn btn-success";
            document.getElementById("saveBtn").style.display = "none";
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
            document.getElementById("nextBtn").className = "btn btn-warning";
            document.getElementById("saveBtn").style.display = "inline";
            document.getElementById("saveBtn").className = "btn btn-success";
        }

        if (n == 0) {
            document.getElementById("prevBtn1").style.display = "none";
            document.getElementById("saveBtn1").style.display = "none";
        } else {
            document.getElementById("prevBtn1").style.display = "inline";
            document.getElementById("prevBtn1").className = "btn btn-danger";
            document.getElementById("saveBtn1").style.display = "inline";
            document.getElementById("saveBtn1").className = "btn btn-success";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn1").innerHTML = "Submit";
            document.getElementById("nextBtn1").className = "btn btn-success";
            document.getElementById("saveBtn1").style.display = "none";
        } else {
            document.getElementById("nextBtn1").innerHTML = "Next";
            document.getElementById("nextBtn1").className = "btn btn-warning";
            document.getElementById("saveBtn1").style.display = "inline";
            document.getElementById("saveBtn1").className = "btn btn-success";
        }
        //... and run a function that will display the correct step indicator:
        fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
        if (n == 1 && !validateForm()) return false;
        // Hide the current tab:
        x[currentTab].style.display = "none";
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;
        // if you have reached the end of the form...
        if (currentTab >= x.length) {
            // ... the form gets submitted:
            confirm("Editing Components is not allowed once the form is submitted.");
            document.getElementById("regForm").submit();
            return false;
        }
        // Otherwise, display the correct tab:
        showTab(currentTab);
    }

    function validateForm() {
        var x, y, i, valid = true;
        document.getElementsByClassName("step")[currentTab].className += " finish";
        //// This function deals with validation of the form fields
        //var x, y, i, valid = true;
        //x = document.getElementsByClassName("tab");
        //y = x[currentTab].getElementsByTagName("input");
        //// A loop that checks every input field in the current tab:
        //for (i = 0; i < y.length; i++) {
        //    // If a field is empty...
        //    if (y[i].value == "") {
        //        // add an "invalid" class to the field:
        //        y[i].className += " invalid";
        //        // and set the current valid status to false
        //        valid = false;
        //    }
        //}
        //// If the valid status is true, mark the step as finished and valid:
        //if (valid) {

        //}
        return valid; // return the valid status
    }

    function fixStepIndicator(n) {
        // This function removes the "active" class of all steps...
        var i, x = document.getElementsByClassName("step");
        for (i = 0; i < x.length; i++) {
            x[i].className = x[i].className.replace(" active", "");
        }
        //... and adds the "active" class on the current step:
        x[n].className += " active";
    }
</script>

<script type="text/javascript">

    $(document).ready(function () {
        $("#Caste").val("भटक्या जमातीचा - क");

        $("#saveBtn1").click(function () {
            confirm("Editing Components is not allowed once the form is submitted.");
            $("#saveBtn").submit();
        });

        $("#Dist").change(function () {
            $("#Tahashil").empty();
            $("#VillageName").empty();
            $("#HVillage").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("getTaluka")',
                dataType: 'json',
                data: { id: $("#Dist").val() },
                success: function (city) {
                    //alert(city);
                    $.each(city, function (i, city) {
                        $("#Tahashil").append('<option value="'
                            + city.Value + '">'
                            + city.Text + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed.' + ex);
                }
            });
            return false;
        });
        var age = "";
      // $('#dob').datepicker({
        //    onSelect: function (value, ui) {
        //        var today = new Date();
        //        age = today.getFullYear() - ui.selectedYear;
        //        $('#age').val(age);
        //    },
        //    changeMonth: true,
        //    changeYear: true
        //})
        $('input[id$=DOB]').datepicker({
            dateFormat: 'dd/mm/yy',
            onSelect: function (value, ui) {
                var today = new Date();
                age = today.getFullYear() - ui.selectedYear;
                $('#Age').val(age);
            },
            changeMonth: true,
            yearRange: '1900:2019',
            changeYear: true
        });

        $("#Tahashil").change(function () {
            $("#VillageName").empty();
            $("#HVillage").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("getVillage")',
                dataType: 'json',
                data: { id: $("#Tahashil").val() },
                success: function (city) {

                    $.each(city, function (i, city) {
                        $("#VillageName").append('<option value="'
                                                   + city.Value + '">'
                                             + city.Text + '</option>');
                    });
                    $.each(city, function (i, city) {
                        $("#HVillage").append('<option value="'
                            + city.Value + '">'
                            + city.Text + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed.' + ex);
                }
            });
            return false;
        })

        $('#CompNumber1').change(function () {
            if ($('#CompNumber1').is(':checked') == true) {
                $('#CompNumber2').prop('disabled', true);
                $('#CompNumber3').prop('disabled', true);
                $('#CompNumber4').prop('disabled', true);
                $('#CompNumber5').prop('disabled', true);
                $('#CompNumber6').prop('disabled', true);
                $('#CompNumber7').prop('disabled', true);
               $('#CompNumber8').prop('disabled', true);
                $('#CompNumber9').prop('disabled', true);
                $('#CompNumber10').prop('disabled', true);
                $('#CompNumber11').prop('disabled', true);
                $('#CompNumber12').prop('disabled', true);
                $('#CompNumber13').prop('disabled', true);
                $('#CompNumber14').prop('disabled', true);
                $('#CompNumber15').prop('disabled', true);
                console.log('checked1');
            }
            else {
                $('#CompNumber2').prop('disabled', false);
                $('#CompNumber3').prop('disabled', false);
                $('#CompNumber4').prop('disabled', false);
                $('#CompNumber5').prop('disabled', false);
                $('#CompNumber6').prop('disabled', false);
                $('#CompNumber7').prop('disabled', false);
               $('#CompNumber8').prop('disabled', true);
                $('#CompNumber9').prop('disabled', false);
                $('#CompNumber10').prop('disabled', false);
                $('#CompNumber11').prop('disabled', false);
                $('#CompNumber12').prop('disabled', false);
                $('#CompNumber13').prop('disabled', false);
                $('#CompNumber14').prop('disabled', false);
                $('#CompNumber15').prop('disabled', false);
            }
        });
        $('#CompNumber2').change(function () {
            if ($('#CompNumber2').is(':checked') == true) {
                $('#CompNumber1').prop('disabled', true);
                $('#CompNumber3').prop('disabled', true);
                $('#CompNumber4').prop('disabled', true);
                $('#CompNumber5').prop('disabled', true);
                $('#CompNumber6').prop('disabled', true);
                $('#CompNumber7').prop('disabled', true);
               $('#CompNumber8').prop('disabled', true);
                $('#CompNumber9').prop('disabled', true);
                $('#CompNumber10').prop('disabled', true);
                $('#CompNumber11').prop('disabled', true);
                $('#CompNumber12').prop('disabled', true);
                $('#CompNumber13').prop('disabled', true);
                $('#CompNumber14').prop('disabled', true);
                $('#CompNumber15').prop('disabled', true);
                console.log('checked2');
            }
            else {
                $('#CompNumber1').prop('disabled', false);
                $('#CompNumber3').prop('disabled', false);
                $('#CompNumber4').prop('disabled', false);
                $('#CompNumber5').prop('disabled', false);
                $('#CompNumber6').prop('disabled', false);
                $('#CompNumber7').prop('disabled', false);
               $('#CompNumber8').prop('disabled', true);
                $('#CompNumber9').prop('disabled', false);
                $('#CompNumber10').prop('disabled', false);
                $('#CompNumber11').prop('disabled', false);
                $('#CompNumber12').prop('disabled', false);
                $('#CompNumber13').prop('disabled', false);
                $('#CompNumber14').prop('disabled', false);
                $('#CompNumber15').prop('disabled', false);
            }
        });
        $('#CompNumber3').change(function () {
            if ($('#CompNumber3').is(':checked') == true) {
                $('#CompNumber1').prop('disabled', true);
                $('#CompNumber2').prop('disabled', true);
                $('#CompNumber4').prop('disabled', true);
                $('#CompNumber5').prop('disabled', true);
                $('#CompNumber6').prop('disabled', true);
                $('#CompNumber7').prop('disabled', true);
                $('#CompNumber8').prop('disabled', false);
                $('#CompNumber9').prop('disabled', false);
                $('#CompNumber10').prop('disabled', false);
                $('#CompNumber11').prop('disabled', false);
                $('#CompNumber12').prop('disabled', false);
                $('#CompNumber13').prop('disabled', false);
                $('#CompNumber14').prop('disabled', true);
                $('#CompNumber15').prop('disabled', true);
                console.log('checked2');
            }
            else {
                $('#CompNumber1').prop('disabled', false);
                $('#CompNumber2').prop('disabled', false);
                $('#CompNumber4').prop('disabled', false);
                $('#CompNumber5').prop('disabled', false);
                $('#CompNumber6').prop('disabled', false);
                $('#CompNumber7').prop('disabled', false);
               $('#CompNumber8').prop('disabled', false);
                $('#CompNumber9').prop('disabled', false);
                $('#CompNumber10').prop('disabled', false);
                $('#CompNumber11').prop('disabled', false);
                $('#CompNumber12').prop('disabled', false);
                $('#CompNumber13').prop('disabled', false);
                $('#CompNumber14').prop('disabled', false);
                $('#CompNumber15').prop('disabled', false);
            }
        });
        $('#CompNumber4').change(function () {
            if ($('#CompNumber4').is(':checked') == true) {
                $('#CompNumber1').prop('disabled', true);
                $('#CompNumber2').prop('disabled', true);
                $('#CompNumber3').prop('disabled', true);
                $('#CompNumber5').prop('disabled', true);
                $('#CompNumber6').prop('disabled', true);
                $('#CompNumber7').prop('disabled', true);
               $('#CompNumber8').prop('disabled', true);
                $('#CompNumber9').prop('disabled', false);
                $('#CompNumber10').prop('disabled', false);
                $('#CompNumber11').prop('disabled', false);
                $('#CompNumber12').prop('disabled', false);
                $('#CompNumber13').prop('disabled', false);
                $('#CompNumber14').prop('disabled', true);
                $('#CompNumber15').prop('disabled', true);
                console.log('checked2');
            }
            else {
                $('#CompNumber1').prop('disabled', false);
                $('#CompNumber2').prop('disabled', false);
                $('#CompNumber3').prop('disabled', false);
                $('#CompNumber5').prop('disabled', false);
                $('#CompNumber6').prop('disabled', false);
                $('#CompNumber7').prop('disabled', false);
               $('#CompNumber8').prop('disabled', true);
                $('#CompNumber9').prop('disabled', false);
                $('#CompNumber10').prop('disabled', false);
                $('#CompNumber11').prop('disabled', false);
                $('#CompNumber12').prop('disabled', false);
                $('#CompNumber13').prop('disabled', false);
                $('#CompNumber14').prop('disabled', false);
                $('#CompNumber15').prop('disabled', false);
            }
        });
        $('#CompNumber5').change(function () {
            if ($('#CompNumber5').is(':checked') == true) {
                $('#CompNumber1').prop('disabled', true);
                $('#CompNumber2').prop('disabled', true);
                $('#CompNumber3').prop('disabled', true);
                $('#CompNumber4').prop('disabled', true);
                $('#CompNumber6').prop('disabled', true);
                $('#CompNumber7').prop('disabled', true);
               $('#CompNumber8').prop('disabled', true);
                $('#CompNumber9').prop('disabled', false);
                $('#CompNumber10').prop('disabled', false);
                $('#CompNumber11').prop('disabled', false);
                $('#CompNumber12').prop('disabled', false);
                $('#CompNumber13').prop('disabled', false);
                $('#CompNumber14').prop('disabled', true);
                $('#CompNumber15').prop('disabled', true);
                console.log('checked2');
            }
            else {
                $('#CompNumber1').prop('disabled', false);
                $('#CompNumber2').prop('disabled', false);
                $('#CompNumber3').prop('disabled', false);
                $('#CompNumber4').prop('disabled', false);
                $('#CompNumber6').prop('disabled', false);
                $('#CompNumber7').prop('disabled', false);
               $('#CompNumber8').prop('disabled', true);
                $('#CompNumber9').prop('disabled', false);
                $('#CompNumber10').prop('disabled', false);
                $('#CompNumber11').prop('disabled', false);
                $('#CompNumber12').prop('disabled', false);
                $('#CompNumber13').prop('disabled', false);
                $('#CompNumber14').prop('disabled', false);
                $('#CompNumber15').prop('disabled', false);
            }
        });
        $('#CompNumber6').change(function () {
            if ($('#CompNumber6').is(':checked') == true) {
                $('#CompNumber1').prop('disabled', true);
                $('#CompNumber2').prop('disabled', true);
                $('#CompNumber3').prop('disabled', true);
                $('#CompNumber4').prop('disabled', true);
                $('#CompNumber5').prop('disabled', true);
                $('#CompNumber7').prop('disabled', true);
               $('#CompNumber8').prop('disabled', true);
                $('#CompNumber9').prop('disabled', false);
                $('#CompNumber10').prop('disabled', false);
                $('#CompNumber11').prop('disabled', false);
                $('#CompNumber12').prop('disabled', false);
                $('#CompNumber13').prop('disabled', false);
                $('#CompNumber14').prop('disabled', true);
                $('#CompNumber15').prop('disabled', true);
                console.log('checked2');
            }
            else {
                $('#CompNumber1').prop('disabled', false);
                $('#CompNumber2').prop('disabled', false);
                $('#CompNumber3').prop('disabled', false);
                $('#CompNumber5').prop('disabled', false);
                $('#CompNumber4').prop('disabled', false);
                $('#CompNumber7').prop('disabled', false);
               $('#CompNumber8').prop('disabled', true);
                $('#CompNumber9').prop('disabled', false);
                $('#CompNumber10').prop('disabled', false);
                $('#CompNumber11').prop('disabled', false);
                $('#CompNumber12').prop('disabled', false);
                $('#CompNumber13').prop('disabled', false);
                $('#CompNumber14').prop('disabled', false);
                $('#CompNumber15').prop('disabled', false);
            }
        });
        $('#CompNumber7').change(function () {
            if ($('#CompNumber7').is(':checked') == true) {
                $('#CompNumber1').prop('disabled', true);
                $('#CompNumber2').prop('disabled', true);
                $('#CompNumber3').prop('disabled', true);
                $('#CompNumber5').prop('disabled', true);
                $('#CompNumber6').prop('disabled', true);
                $('#CompNumber4').prop('disabled', true);
               $('#CompNumber8').prop('disabled', true);
                $('#CompNumber9').prop('disabled', false);
                $('#CompNumber10').prop('disabled', false);
                $('#CompNumber11').prop('disabled', false);
                $('#CompNumber12').prop('disabled', false);
                $('#CompNumber13').prop('disabled', false);
                $('#CompNumber14').prop('disabled', true);
                $('#CompNumber15').prop('disabled', true);
                console.log('checked2');
            }
            else {
                $('#CompNumber1').prop('disabled', false);
                $('#CompNumber2').prop('disabled', false);
                $('#CompNumber3').prop('disabled', false);
                $('#CompNumber5').prop('disabled', false);
                $('#CompNumber6').prop('disabled', false);
                $('#CompNumber4').prop('disabled', false);
               $('#CompNumber8').prop('disabled', true);
                $('#CompNumber9').prop('disabled', false);
                $('#CompNumber10').prop('disabled', false);
                $('#CompNumber11').prop('disabled', false);
                $('#CompNumber12').prop('disabled', false);
                $('#CompNumber13').prop('disabled', false);
                $('#CompNumber14').prop('disabled', false);
                $('#CompNumber15').prop('disabled', false);
            }
    });
    $('#CompNumber8').change(function () {
        if ($('#CompNumber8').is(':checked') == true) {
            $('#CompNumber1').prop('disabled', true);
            $('#CompNumber2').prop('disabled', true);
            $('#CompNumber3').prop('disabled', true);
            $('#CompNumber5').prop('disabled', true);
            $('#CompNumber6').prop('disabled', true);
            $('#CompNumber4').prop('disabled', true);
            $('#CompNumber7').prop('disabled', true);
            $('#CompNumber9').prop('disabled', false);
            $('#CompNumber10').prop('disabled', false);
            $('#CompNumber11').prop('disabled', false);
            $('#CompNumber12').prop('disabled', false);
            $('#CompNumber13').prop('disabled', false);
            $('#CompNumber14').prop('disabled', true);
            $('#CompNumber15').prop('disabled', true);
            console.log('checked2');
        }
        else {
            $('#CompNumber1').prop('disabled', false);
            $('#CompNumber2').prop('disabled', false);
            $('#CompNumber3').prop('disabled', false);
            $('#CompNumber5').prop('disabled', false);
            $('#CompNumber6').prop('disabled', false);
            $('#CompNumber4').prop('disabled', false);
            $('#CompNumber7').prop('disabled', true);
            $('#CompNumber9').prop('disabled', false);
            $('#CompNumber10').prop('disabled', false);
            $('#CompNumber11').prop('disabled', false);
            $('#CompNumber12').prop('disabled', false);
            $('#CompNumber13').prop('disabled', false);
            $('#CompNumber14').prop('disabled', false);
            $('#CompNumber15').prop('disabled', false);
        }
    });
        $('#CompNumber9').change(function () {
            if ($('#CompNumber9').is(':checked') == true) {
                $('#CompNumber1').prop('disabled', true);
                $('#CompNumber2').prop('disabled', true);
                $('#CompNumber3').prop('disabled', false);
                $('#CompNumber5').prop('disabled', false);
                $('#CompNumber6').prop('disabled', false);
                $('#CompNumber4').prop('disabled', false);
               $('#CompNumber8').prop('disabled', true);
                $('#CompNumber7').prop('disabled', false);
                $('#CompNumber10').prop('disabled', true);
                $('#CompNumber11').prop('disabled', true);
                $('#CompNumber12').prop('disabled', false);
                $('#CompNumber13').prop('disabled', false);
                $('#CompNumber14').prop('disabled', true);
                $('#CompNumber15').prop('disabled', true);
                console.log('checked2');
            }
            else {
                if (($('#CompNumber3').is(':checked') == true) || ($('#CompNumber4').is(':checked') == true) || ($('#CompNumber5').is(':checked') == true) || ($('#CompNumber6').is(':checked') == true) || ($('#CompNumber7').is(':checked') == true)) {
                    $('#CompNumber1').prop('disabled', false);
                    $('#CompNumber2').prop('disabled', false);
                    $('#CompNumber3').prop('disabled', true);
                    $('#CompNumber5').prop('disabled', true);
                    $('#CompNumber6').prop('disabled', true);
                    $('#CompNumber4').prop('disabled', true);
                    $('#CompNumber8').prop('disabled', false);
                    $('#CompNumber7').prop('disabled', true);
                    $('#CompNumber10').prop('disabled', false);
                    $('#CompNumber11').prop('disabled', false);
                    $('#CompNumber12').prop('disabled', false);
                    $('#CompNumber13').prop('disabled', false);
                    $('#CompNumber14').prop('disabled', false);
                    $('#CompNumber15').prop('disabled', false);
                }
                else
                {
                    if (($('#CompNumber3').is(':checked') == true) || ($('#CompNumber4').is(':checked') == true) || ($('#CompNumber5').is(':checked') == true) || ($('#CompNumber6').is(':checked') == true) || ($('#CompNumber7').is(':checked') == true)) {
                        $('#CompNumber1').prop('disabled', false);
                        $('#CompNumber2').prop('disabled', false);
                        $('#CompNumber3').prop('disabled', true);
                        $('#CompNumber5').prop('disabled', true);
                        $('#CompNumber6').prop('disabled', true);
                        $('#CompNumber4').prop('disabled', true);
                        $('#CompNumber9').prop('disabled', false);
                        $('#CompNumber7').prop('disabled', true);
                        $('#CompNumber10').prop('disabled', false);
                        $('#CompNumber11').prop('disabled', false);
                        $('#CompNumber12').prop('disabled', false);
                        $('#CompNumber13').prop('disabled', false);
                        $('#CompNumber14').prop('disabled', false);
                        $('#CompNumber15').prop('disabled', false);
                    }
                    else {
                        $('#CompNumber1').prop('disabled', false);
                        $('#CompNumber2').prop('disabled', false);
                        $('#CompNumber3').prop('disabled', false);
                        $('#CompNumber5').prop('disabled', false);
                        $('#CompNumber6').prop('disabled', false);
                        $('#CompNumber4').prop('disabled', false);
                        $('#CompNumber9').prop('disabled', false);
                        $('#CompNumber7').prop('disabled', false);
                        $('#CompNumber10').prop('disabled', false);
                        $('#CompNumber11').prop('disabled', false);
                        $('#CompNumber12').prop('disabled', false);
                        $('#CompNumber13').prop('disabled', false);
                        $('#CompNumber14').prop('disabled', false);
                        $('#CompNumber15').prop('disabled', false);
                    }
                }
            }
        });
        $('#CompNumber10').change(function () {
            if ($('#CompNumber10').is(':checked') == true) {
                $('#CompNumber1').prop('disabled', true);
                $('#CompNumber2').prop('disabled', true);
                $('#CompNumber3').prop('disabled', false);
                $('#CompNumber5').prop('disabled', false);
                $('#CompNumber6').prop('disabled', false);
                $('#CompNumber4').prop('disabled', false);
               $('#CompNumber8').prop('disabled', true);
                $('#CompNumber7').prop('disabled', false);
                $('#CompNumber9').prop('disabled', true);
                $('#CompNumber11').prop('disabled', true);
                $('#CompNumber12').prop('disabled', false);
                $('#CompNumber13').prop('disabled', false);
                $('#CompNumber14').prop('disabled', true);
                $('#CompNumber15').prop('disabled', true);
                console.log('checked2');
            }
            else {
                if (($('#CompNumber3').is(':checked') == true) || ($('#CompNumber4').is(':checked') == true) || ($('#CompNumber5').is(':checked') == true) || ($('#CompNumber6').is(':checked') == true) || ($('#CompNumber7').is(':checked') == true)) {
                    $('#CompNumber1').prop('disabled', false);
                    $('#CompNumber2').prop('disabled', false);
                    $('#CompNumber3').prop('disabled', true);
                    $('#CompNumber5').prop('disabled', true);
                    $('#CompNumber6').prop('disabled', true);
                    $('#CompNumber4').prop('disabled', true);
                    $('#CompNumber8').prop('disabled', false);
                    $('#CompNumber7').prop('disabled', true);
                    $('#CompNumber9').prop('disabled', false);
                    $('#CompNumber11').prop('disabled', false);
                    $('#CompNumber12').prop('disabled', false);
                    $('#CompNumber13').prop('disabled', false);
                    $('#CompNumber14').prop('disabled', false);
                    $('#CompNumber15').prop('disabled', false);
                }
                else {
                    $('#CompNumber1').prop('disabled', false);
                    $('#CompNumber2').prop('disabled', false);
                    $('#CompNumber3').prop('disabled', false);
                    $('#CompNumber5').prop('disabled', false);
                    $('#CompNumber6').prop('disabled', false);
                    $('#CompNumber4').prop('disabled', false);
                    $('#CompNumber8').prop('disabled', false);
                    $('#CompNumber7').prop('disabled', false);
                    $('#CompNumber9').prop('disabled', false);
                    $('#CompNumber11').prop('disabled', false);
                    $('#CompNumber12').prop('disabled', false);
                    $('#CompNumber13').prop('disabled', false);
                    $('#CompNumber14').prop('disabled', false);
                    $('#CompNumber15').prop('disabled', false);
                }
             
            }
        });
        $('#CompNumber11').change(function () {
            if ($('#CompNumber11').is(':checked') == true) {
                $('#CompNumber1').prop('disabled', true);
                $('#CompNumber2').prop('disabled', true);
                $('#CompNumber3').prop('disabled', false);
                $('#CompNumber5').prop('disabled', false);
                $('#CompNumber6').prop('disabled', false);
                $('#CompNumber4').prop('disabled', false);
                $('#CompNumber8').prop('disabled', true);
                $('#CompNumber7').prop('disabled', false);
                $('#CompNumber10').prop('disabled', true);
                $('#CompNumber9').prop('disabled', true);
                $('#CompNumber12').prop('disabled', false);
                $('#CompNumber13').prop('disabled', false);
                $('#CompNumber14').prop('disabled', true);
                $('#CompNumber15').prop('disabled', true);
                console.log('checked2');
            }
            else {
                if (($('#CompNumber3').is(':checked') == true) || ($('#CompNumber4').is(':checked') == true) || ($('#CompNumber5').is(':checked') == true) || ($('#CompNumber6').is(':checked') == true) || ($('#CompNumber7').is(':checked') == true)) {
                    $('#CompNumber1').prop('disabled', false);
                    $('#CompNumber2').prop('disabled', false);
                    $('#CompNumber3').prop('disabled', true);
                    $('#CompNumber5').prop('disabled', true);
                    $('#CompNumber6').prop('disabled', true);
                    $('#CompNumber4').prop('disabled', true);
                    $('#CompNumber8').prop('disabled', false);
                    $('#CompNumber7').prop('disabled', true);
                    $('#CompNumber10').prop('disabled', false);
                    $('#CompNumber9').prop('disabled', false);
                    $('#CompNumber12').prop('disabled', false);
                    $('#CompNumber13').prop('disabled', false);
                    $('#CompNumber14').prop('disabled', false);
                    $('#CompNumber15').prop('disabled', false);
                }
                else {
                    $('#CompNumber1').prop('disabled', false);
                    $('#CompNumber2').prop('disabled', false);
                    $('#CompNumber3').prop('disabled', false);
                    $('#CompNumber5').prop('disabled', false);
                    $('#CompNumber6').prop('disabled', false);
                    $('#CompNumber4').prop('disabled', false);
                    $('#CompNumber8').prop('disabled', false);
                    $('#CompNumber7').prop('disabled', false);
                    $('#CompNumber10').prop('disabled', false);
                    $('#CompNumber9').prop('disabled', false);
                    $('#CompNumber12').prop('disabled', false);
                    $('#CompNumber13').prop('disabled', false);
                    $('#CompNumber14').prop('disabled', false);
                    $('#CompNumber15').prop('disabled', false);
                }
            }
        });
        $('#CompNumber12').change(function () {
            if ($('#CompNumber12').is(':checked') == true) {
                $('#CompNumber1').prop('disabled', true);
                $('#CompNumber2').prop('disabled', true);
                $('#CompNumber3').prop('disabled', false);
                $('#CompNumber5').prop('disabled', false);
                $('#CompNumber6').prop('disabled', false);
                $('#CompNumber4').prop('disabled', false);
                $('#CompNumber8').prop('disabled', true);
                $('#CompNumber7').prop('disabled', false);
                $('#CompNumber10').prop('disabled', false);
                $('#CompNumber11').prop('disabled', false);
                $('#CompNumber9').prop('disabled', false);
                $('#CompNumber13').prop('disabled', true);
                $('#CompNumber14').prop('disabled', true);
                $('#CompNumber15').prop('disabled', true);
                console.log('checked2');
            }
            else {
                $('#CompNumber1').prop('disabled', false);
                $('#CompNumber2').prop('disabled', false);
                $('#CompNumber3').prop('disabled', false);
                $('#CompNumber5').prop('disabled', false);
                $('#CompNumber6').prop('disabled', false);
                $('#CompNumber4').prop('disabled', false);
                $('#CompNumber8').prop('disabled', true);
                $('#CompNumber7').prop('disabled', false);
                $('#CompNumber10').prop('disabled', false);
                $('#CompNumber11').prop('disabled', false);
                $('#CompNumber9').prop('disabled', false);
                $('#CompNumber13').prop('disabled', false);
                $('#CompNumber14').prop('disabled', false);
                $('#CompNumber15').prop('disabled', false);
            }
        });
        $('#CompNumber13').change(function () {
            if ($('#CompNumber13').is(':checked') == true) {
                $('#CompNumber1').prop('disabled', true);
                $('#CompNumber2').prop('disabled', true);
                $('#CompNumber3').prop('disabled', false);
                $('#CompNumber5').prop('disabled', false);
                $('#CompNumber6').prop('disabled', false);
                $('#CompNumber4').prop('disabled', false);
                $('#CompNumber8').prop('disabled', true);
                $('#CompNumber7').prop('disabled', false);
                $('#CompNumber10').prop('disabled', false);
                $('#CompNumber11').prop('disabled', false);
                $('#CompNumber9').prop('disabled', false);
                $('#CompNumber12').prop('disabled', true);
                $('#CompNumber14').prop('disabled', true);
                $('#CompNumber15').prop('disabled', true);
                console.log('checked2');
            }
            else {
                $('#CompNumber1').prop('disabled', false);
                $('#CompNumber2').prop('disabled', false);
                $('#CompNumber3').prop('disabled', false);
                $('#CompNumber5').prop('disabled', false);
                $('#CompNumber6').prop('disabled', false);
                $('#CompNumber4').prop('disabled', false);
                $('#CompNumber8').prop('disabled', true);
                $('#CompNumber7').prop('disabled', false);
                $('#CompNumber10').prop('disabled', false);
                $('#CompNumber11').prop('disabled', false);
                $('#CompNumber9').prop('disabled', false);
                $('#CompNumber12').prop('disabled', false);
                $('#CompNumber14').prop('disabled', false);
                $('#CompNumber15').prop('disabled', false);
            }
        });
        $('#CompNumber14').change(function () {
            if ($('#CompNumber14').is(':checked') == true) {
                $('#CompNumber1').prop('disabled', true);
                $('#CompNumber3').prop('disabled', true);
                $('#CompNumber4').prop('disabled', true);
                $('#CompNumber5').prop('disabled', true);
                $('#CompNumber6').prop('disabled', true);
                $('#CompNumber7').prop('disabled', true);
                $('#CompNumber8').prop('disabled', true);
                $('#CompNumber9').prop('disabled', true);
                $('#CompNumber10').prop('disabled', true);
                $('#CompNumber11').prop('disabled', true);
                $('#CompNumber12').prop('disabled', true);
                $('#CompNumber13').prop('disabled', true);
                $('#CompNumber2').prop('disabled', true);
                $('#CompNumber15').prop('disabled', true);
                console.log('checked14');
            }
            else {
                $('#CompNumber1').prop('disabled', false);
                $('#CompNumber3').prop('disabled', false);
                $('#CompNumber4').prop('disabled', false);
                $('#CompNumber5').prop('disabled', false);
                $('#CompNumber6').prop('disabled', false);
                $('#CompNumber7').prop('disabled', false);
                $('#CompNumber8').prop('disabled', true);
                $('#CompNumber9').prop('disabled', false);
                $('#CompNumber10').prop('disabled', false);
                $('#CompNumber11').prop('disabled', false);
                $('#CompNumber12').prop('disabled', false);
                $('#CompNumber13').prop('disabled', false);
                $('#CompNumber2').prop('disabled', false);
                $('#CompNumber15').prop('disabled', false);
            }
        });
        $('#CompNumber15').change(function () {
            if ($('#CompNumber15').is(':checked') == true) {
                $('#CompNumber1').prop('disabled', true);
                $('#CompNumber3').prop('disabled', true);
                $('#CompNumber4').prop('disabled', true);
                $('#CompNumber5').prop('disabled', true);
                $('#CompNumber6').prop('disabled', true);
                $('#CompNumber7').prop('disabled', true);
                $('#CompNumber8').prop('disabled', true);
                $('#CompNumber9').prop('disabled', true);
                $('#CompNumber10').prop('disabled', true);
                $('#CompNumber11').prop('disabled', true);
                $('#CompNumber12').prop('disabled', true);
                $('#CompNumber13').prop('disabled', true);
                $('#CompNumber14').prop('disabled', true);
                $('#CompNumber2').prop('disabled', true);
                console.log('checked15');
            }
            else {
                $('#CompNumber1').prop('disabled', false);
                $('#CompNumber3').prop('disabled', false);
                $('#CompNumber4').prop('disabled', false);
                $('#CompNumber5').prop('disabled', false);
                $('#CompNumber6').prop('disabled', false);
                $('#CompNumber7').prop('disabled', false);
                $('#CompNumber8').prop('disabled', false);
                $('#CompNumber9').prop('disabled', false);
                $('#CompNumber10').prop('disabled', false);
                $('#CompNumber11').prop('disabled', false);
                $('#CompNumber12').prop('disabled', false);
                $('#CompNumber13').prop('disabled', false);
                $('#CompNumber14').prop('disabled', false);
                $('#CompNumber2').prop('disabled', false);
            }
        });

        $(document).on('change', '.btn-file :file', function ()
        {
            var input = $(this),
                label = input.val().replace(/\\/g, '/').replace(/.*\//, '');
            input.trigger('fileselect', [label]);
        });

        $('.btn-file :file').on('fileselect', function (event, label) {

            var input = $(this).parents('.input-group').find(':text'),
                log = label;

            if (input.length) {
                input.val(log);
            } else {
                if (log) alert(log);
            }

        });
        function readURL(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    $('#img-upload').attr('src', e.target.result);
                }

                reader.readAsDataURL(input.files[0]);
            }
        }

        $("#imgInp").change(function () {
            readURL(this);
        });

        });


    function checkCripple() {
        if (document.getElementById('ApplicantCrippled1').checked) {
            document.getElementById('divCripple').style.display = 'block';
        }
        else document.getElementById('divCripple').style.display = 'none';
    }

    function checkSheep() {
        if (document.getElementById('PresentDaySheep1').checked) {
            document.getElementById('divSheep').style.display = 'block';
        }
        else document.getElementById('divSheep').style.display = 'none';
    }

    function checkLandOwned() {
        if (document.getElementById('IsApplicantOwnedLand1').checked) {
            document.getElementById('divLandOwned').style.display = 'block';
        }
        else {
            document.getElementById('divLandOwned').style.display = 'none';
            document.getElementById('divLease').style.display = 'block';

        }
    }

    function checkLandLeased() {
        if (document.getElementById('IsNotIsAvailableOnLease1').checked) {
            document.getElementById('divLandLeased').style.display = 'block';
        }
        else document.getElementById('divLandLeased').style.display = 'none';
    }

    function checkWarehouse() {
        if (document.getElementById('IsWarehouseForSheep1').checked) {
            document.getElementById('divWarehouse').style.display = 'block';
        }
        else {
            document.getElementById('divWarehouse').style.display = 'none';
            document.getElementById('divSpace').style.display = 'block';
        }
        }

        function checkCompany() {
            if (document.getElementById('IsanimalHusbandryManufacturingCompanyMember1').checked) {
                document.getElementById('divCompany').style.display = 'block';
            }
            else {
                document.getElementById('divCompany').style.display = 'none';
            }
        }

        function checkSavings() {
            if (document.getElementById('IsSavingsGroupMember1').checked) {
                document.getElementById('divSavings').style.display = 'block';
            }
            else {
                document.getElementById('divSavings').style.display = 'none';
            }
        }
</script>
